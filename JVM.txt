相关书籍：《深入理解Java虚拟机》，《实战Java虚拟机》
知识点梳理：
1.基础系列：
	1）JDK与JRE：
		a. JRE (Java Runtime Environment):仅包含运行Java程序的必须组件，包括Java虚拟机及Java核心类库等。
		b. JDK（Java Development Kit):除了包含JRE之外，还附带了一系列开发、诊断工具。

	2）JDK与J2SE：
		J2SE是Java三大技术体系之一（J2SE, J2EE, J2ME），在JDK1.6发布的时候，将命名更改为Java SE 6, Java EE 6, Java ME 6。
		a. J2SE 标准版技术体系，包含了构成Java语言的核心类，例如：数据库连接，网络编程，接口定义等。主要用于桌面应用软件的编程。
		b. J2EE 企业版技术体系，除了包含J2SE中的类，还包含用于开发企业级应用的类，比如：Servlet,JSP,EJB等。主要用于分布式网络程序的开发，比如电子商务网站等。
		c. J2ME 嵌入式技术体系，包含J2SE中的一部分类。主要用于消费类电子产品的软件开发，例如：手机、PDA、寻呼机等。
		
	3）什么是虚拟机？
		Java可以在服务端的不同系统运行是因为，Java与其他语言不同，Java并不直接将代码编译成与系统有关的机器码，而是编译成一种特定的语言规范，称之为字节码。因此Java程序要运行，都得先编译成字节码文件之后才能运行。而各系统是无法了解字节码文件的内容的，需要JVM对字节码文件进行解析，并翻译成各操作系统能理解的机器码。！！！！！Java虚拟机运行的是字节码文件（class文件）！！！！
	Source Code ——> Byte Code --> JVM -->不同系统的机器代码
	
	4）从源代码到机器码
		a. 编译器可以分为：
			I. 前端编译器- 源代码到字节码： Sun 的Javac, Eclipse JDT中的增量式编译器（ECJ）
			在JDK安装目录里有一个javac工具，就是它将Java代码翻译成字节码，它被叫做编译器。相对于其他编译器，它处于编译前期，因此被称为前端编译器。运行javac命令的过程就是javac编译器解析Java源代码，并且生成字节码文件的过程。
			javac编译器的处理过程可以分为下面四个阶段：
				1.词法、语法分析。JVM在这个阶段会对源代码的字符进行一次扫面，最终生成一个抽象的语法树。（搞懂代码到底想要干嘛）
				2.填充符号表。类会互相引用，但是在编译阶段，无法确定其地址，因此会使用一个符号来替代。即对抽象的类或者接口进行符号填充，等到类加载阶段JVM会将符号替换成具体的内存地址。
				3.注解处理。JVM对注解进行分析，根据注解的作用将其还原成具体的指令集。
				4.分析与字节码生成。JVM根据上面几个阶段分析的结果，进行字节码生成，输出最终的class文件。
				
			II. JIT编译器（Just-in-Time）- 从字节码到机器码：HotSpot VM的 C1,C2编译器
				源代码转化成字节码之后有两个选择：使用Java解释器解释执行字节码（启动速度快，运行速度慢）或者用JIT编译器将字节码转化成本地机器码（启动速度慢，运行速度快）。解释器不用将字节码都转化为机器码，因此少了优化的时间，但机器码运行效率比Java解释器高。因此，在实：际情况下，为了提高运行速度及效率，会采用两种结合的方式进行Java代码的编译执行。
				在HotSpot虚拟机内置了两个即时编译器，分别为Client Complier和Server Compiler。两种编译器衍生出两种不同的编译模式，分别为C1编译模式，C2编译模式。两种编译模式的区别：C1编译模式会将字节码编译为本地代码，进行简单、可靠的优化，如有必要将加入性能监控逻辑。而C2编译模式也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，甚至会根据性能监控信息进行一些不可靠的激进优化。
				如何选择编译模式？对于HotSpot虚拟机来说，有三种运行模式可选：1.混合模式（Mixed Mode)，即C1、C2混合使用，为默认的运行模式。如果想单独使用C1或者C2，用-client / -server打开即可；2.解释模式（Interpreted Mode），即所有代码都解释执行，但是无法编译时也会解释执行，使用-Xcomp打开这种模式；3.编译模式（Compiled Mode)，优先采用编译，但无法编译时也会解释执行，使用-Xcomp打开。
				
			III. AOT编译器 - 源代码到机器码：GNU Compiler for the Java(GCT), Excelsior JET.
				AOT编译器的基本思想是：在程序执行前生成Java方法的本地代码，以便在程序运行时直接使用本地代码。但是Java语言的动态特性会影响Java程序静态编译代码的质量。所以AOT的编译质量比不上JIT。其存在的目的是避免JIT编译器的运行时性能消耗或者内存消耗，或者避免解释程序的早期性能开销。编译代码速度：解释执行>AOT>JIT；编译质量：JIT>AOT>解释执行。AOT的存在时JVM牺牲质量换取性能的策略。
	5)字节码文件结构 - 字节码格式规范：《Java虚拟机规范》规定了虚拟机结构、class类文件结构、字节码指令等内容。
		字节码文件结构是一组以8位字节为基础的二进制流，各数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符。在字节码结构中，有两种最基本的数据类型了，哎表示字节码文件格式：无符号数和表。
		a.无符号数属于最基本的数据类型，以u1,u2,u4,u8分别代表1个字节、2个字节、4个字节、8个字节的无符号数。无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成的字符串值。
		b.表是由多个无符号数或者其他表作为数据项构成的复合数据类型。用于描述有层次关系的复合结构的数据。一张完整的表分为以下七个部分，这七部分组成了一个完整的Class字节码文件：
			I.魔数与Class文件版本:
				魔数：Class文件的第1-4个字节代表文件的魔数，唯一作用为确定这个文件是否能被虚拟机接受的Class文件，固定值为0xCAFEBEBE，如果不是，那么虚拟机会拒绝运行这个文件。
				Class文件版本：第5-6个字节代表Class文件的次版本号，编译该Class文件的JDK次版本号。第7-8个字节代表Class文件的主版本号。
			II.常量池：版本信息之后的为常量池信息
				常量池个数：之后的前2个字节
				常量池具体信息：常量池个数之后的不定长度数据。
			III.访问标志：常量池之后的两个字节代表类或者接口访问标记。（访问标志可能是由多个标志名称值进行或运算得出的）。
			VI.类索引、父类索引、接口索引：类索引及父类索引都是u2类型的数据，接口索引为u2类型的数据的集合。Class文件由这三项来确定类的继承关系。		
				类索引：用于确定本类的全限定名，类索引为0005即表示指向常量池中第5个常量。
				父类索引：用于确定本类的父类的全限定名。
				接口索引：用来描述哪个类实现了哪些接口，第一项为u2类型的接口计数器，表示索引表的容量，接着为所有接口信息。如果没有实现接口，计数器的值为0，后面的接口索引表则不占用任何字节。
			V.字段表集合：用于描述接口或者类中声明的变量。类接口集合后的2个字节为字段计数器，表示总共有几个属性字段。之后为具体的属性数据。
			IV.方法表集合：字段表之后的2个字节为方法计数器，表示类中有几个方法。字段计数器之后才是具体的方法数据。
			IIV.属性表集合：类中属性的属性表。


